// Code generated by mockery v2.23.2. DO NOT EDIT.

package mocks

import (
	domain "github.com/Demacr/otus-hl-socialnetwork/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// SocialNetworkRepository is an autogenerated mock type for the SocialNetworkRepository type
type SocialNetworkRepository struct {
	mock.Mock
}

type SocialNetworkRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *SocialNetworkRepository) EXPECT() *SocialNetworkRepository_Expecter {
	return &SocialNetworkRepository_Expecter{mock: &_m.Mock}
}

// AcceptFriendship provides a mock function with given fields: id, friend_id
func (_m *SocialNetworkRepository) AcceptFriendship(id int, friend_id int) (bool, error) {
	ret := _m.Called(id, friend_id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (bool, error)); ok {
		return rf(id, friend_id)
	}
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(id, friend_id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(id, friend_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SocialNetworkRepository_AcceptFriendship_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcceptFriendship'
type SocialNetworkRepository_AcceptFriendship_Call struct {
	*mock.Call
}

// AcceptFriendship is a helper method to define mock.On call
//   - id int
//   - friend_id int
func (_e *SocialNetworkRepository_Expecter) AcceptFriendship(id interface{}, friend_id interface{}) *SocialNetworkRepository_AcceptFriendship_Call {
	return &SocialNetworkRepository_AcceptFriendship_Call{Call: _e.mock.On("AcceptFriendship", id, friend_id)}
}

func (_c *SocialNetworkRepository_AcceptFriendship_Call) Run(run func(id int, friend_id int)) *SocialNetworkRepository_AcceptFriendship_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *SocialNetworkRepository_AcceptFriendship_Call) Return(_a0 bool, _a1 error) *SocialNetworkRepository_AcceptFriendship_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SocialNetworkRepository_AcceptFriendship_Call) RunAndReturn(run func(int, int) (bool, error)) *SocialNetworkRepository_AcceptFriendship_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFriendRequest provides a mock function with given fields: id, friend_id
func (_m *SocialNetworkRepository) CreateFriendRequest(id int, friend_id int) (bool, error) {
	ret := _m.Called(id, friend_id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (bool, error)); ok {
		return rf(id, friend_id)
	}
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(id, friend_id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(id, friend_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SocialNetworkRepository_CreateFriendRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFriendRequest'
type SocialNetworkRepository_CreateFriendRequest_Call struct {
	*mock.Call
}

// CreateFriendRequest is a helper method to define mock.On call
//   - id int
//   - friend_id int
func (_e *SocialNetworkRepository_Expecter) CreateFriendRequest(id interface{}, friend_id interface{}) *SocialNetworkRepository_CreateFriendRequest_Call {
	return &SocialNetworkRepository_CreateFriendRequest_Call{Call: _e.mock.On("CreateFriendRequest", id, friend_id)}
}

func (_c *SocialNetworkRepository_CreateFriendRequest_Call) Run(run func(id int, friend_id int)) *SocialNetworkRepository_CreateFriendRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *SocialNetworkRepository_CreateFriendRequest_Call) Return(_a0 bool, _a1 error) *SocialNetworkRepository_CreateFriendRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SocialNetworkRepository_CreateFriendRequest_Call) RunAndReturn(run func(int, int) (bool, error)) *SocialNetworkRepository_CreateFriendRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMessage provides a mock function with given fields: _a0
func (_m *SocialNetworkRepository) CreateMessage(_a0 *domain.Message) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Message) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SocialNetworkRepository_CreateMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMessage'
type SocialNetworkRepository_CreateMessage_Call struct {
	*mock.Call
}

// CreateMessage is a helper method to define mock.On call
//   - _a0 *domain.Message
func (_e *SocialNetworkRepository_Expecter) CreateMessage(_a0 interface{}) *SocialNetworkRepository_CreateMessage_Call {
	return &SocialNetworkRepository_CreateMessage_Call{Call: _e.mock.On("CreateMessage", _a0)}
}

func (_c *SocialNetworkRepository_CreateMessage_Call) Run(run func(_a0 *domain.Message)) *SocialNetworkRepository_CreateMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.Message))
	})
	return _c
}

func (_c *SocialNetworkRepository_CreateMessage_Call) Return(_a0 error) *SocialNetworkRepository_CreateMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SocialNetworkRepository_CreateMessage_Call) RunAndReturn(run func(*domain.Message) error) *SocialNetworkRepository_CreateMessage_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePost provides a mock function with given fields: profile_id, post
func (_m *SocialNetworkRepository) CreatePost(profile_id int, post *domain.Post) (int, error) {
	ret := _m.Called(profile_id, post)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(int, *domain.Post) (int, error)); ok {
		return rf(profile_id, post)
	}
	if rf, ok := ret.Get(0).(func(int, *domain.Post) int); ok {
		r0 = rf(profile_id, post)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int, *domain.Post) error); ok {
		r1 = rf(profile_id, post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SocialNetworkRepository_CreatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePost'
type SocialNetworkRepository_CreatePost_Call struct {
	*mock.Call
}

// CreatePost is a helper method to define mock.On call
//   - profile_id int
//   - post *domain.Post
func (_e *SocialNetworkRepository_Expecter) CreatePost(profile_id interface{}, post interface{}) *SocialNetworkRepository_CreatePost_Call {
	return &SocialNetworkRepository_CreatePost_Call{Call: _e.mock.On("CreatePost", profile_id, post)}
}

func (_c *SocialNetworkRepository_CreatePost_Call) Run(run func(profile_id int, post *domain.Post)) *SocialNetworkRepository_CreatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(*domain.Post))
	})
	return _c
}

func (_c *SocialNetworkRepository_CreatePost_Call) Return(_a0 int, _a1 error) *SocialNetworkRepository_CreatePost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SocialNetworkRepository_CreatePost_Call) RunAndReturn(run func(int, *domain.Post) (int, error)) *SocialNetworkRepository_CreatePost_Call {
	_c.Call.Return(run)
	return _c
}

// DeclineFriendship provides a mock function with given fields: id, friend_id
func (_m *SocialNetworkRepository) DeclineFriendship(id int, friend_id int) (bool, error) {
	ret := _m.Called(id, friend_id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (bool, error)); ok {
		return rf(id, friend_id)
	}
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(id, friend_id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(id, friend_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SocialNetworkRepository_DeclineFriendship_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeclineFriendship'
type SocialNetworkRepository_DeclineFriendship_Call struct {
	*mock.Call
}

// DeclineFriendship is a helper method to define mock.On call
//   - id int
//   - friend_id int
func (_e *SocialNetworkRepository_Expecter) DeclineFriendship(id interface{}, friend_id interface{}) *SocialNetworkRepository_DeclineFriendship_Call {
	return &SocialNetworkRepository_DeclineFriendship_Call{Call: _e.mock.On("DeclineFriendship", id, friend_id)}
}

func (_c *SocialNetworkRepository_DeclineFriendship_Call) Run(run func(id int, friend_id int)) *SocialNetworkRepository_DeclineFriendship_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *SocialNetworkRepository_DeclineFriendship_Call) Return(_a0 bool, _a1 error) *SocialNetworkRepository_DeclineFriendship_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SocialNetworkRepository_DeclineFriendship_Call) RunAndReturn(run func(int, int) (bool, error)) *SocialNetworkRepository_DeclineFriendship_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePost provides a mock function with given fields: profile_id, post
func (_m *SocialNetworkRepository) DeletePost(profile_id int, post *domain.Post) error {
	ret := _m.Called(profile_id, post)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *domain.Post) error); ok {
		r0 = rf(profile_id, post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SocialNetworkRepository_DeletePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePost'
type SocialNetworkRepository_DeletePost_Call struct {
	*mock.Call
}

// DeletePost is a helper method to define mock.On call
//   - profile_id int
//   - post *domain.Post
func (_e *SocialNetworkRepository_Expecter) DeletePost(profile_id interface{}, post interface{}) *SocialNetworkRepository_DeletePost_Call {
	return &SocialNetworkRepository_DeletePost_Call{Call: _e.mock.On("DeletePost", profile_id, post)}
}

func (_c *SocialNetworkRepository_DeletePost_Call) Run(run func(profile_id int, post *domain.Post)) *SocialNetworkRepository_DeletePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(*domain.Post))
	})
	return _c
}

func (_c *SocialNetworkRepository_DeletePost_Call) Return(_a0 error) *SocialNetworkRepository_DeletePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SocialNetworkRepository_DeletePost_Call) RunAndReturn(run func(int, *domain.Post) error) *SocialNetworkRepository_DeletePost_Call {
	_c.Call.Return(run)
	return _c
}

// GetDialog provides a mock function with given fields: id1, id2
func (_m *SocialNetworkRepository) GetDialog(id1 int, id2 int) ([]*domain.Message, error) {
	ret := _m.Called(id1, id2)

	var r0 []*domain.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*domain.Message, error)); ok {
		return rf(id1, id2)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*domain.Message); ok {
		r0 = rf(id1, id2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(id1, id2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SocialNetworkRepository_GetDialog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDialog'
type SocialNetworkRepository_GetDialog_Call struct {
	*mock.Call
}

// GetDialog is a helper method to define mock.On call
//   - id1 int
//   - id2 int
func (_e *SocialNetworkRepository_Expecter) GetDialog(id1 interface{}, id2 interface{}) *SocialNetworkRepository_GetDialog_Call {
	return &SocialNetworkRepository_GetDialog_Call{Call: _e.mock.On("GetDialog", id1, id2)}
}

func (_c *SocialNetworkRepository_GetDialog_Call) Run(run func(id1 int, id2 int)) *SocialNetworkRepository_GetDialog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *SocialNetworkRepository_GetDialog_Call) Return(_a0 []*domain.Message, _a1 error) *SocialNetworkRepository_GetDialog_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SocialNetworkRepository_GetDialog_Call) RunAndReturn(run func(int, int) ([]*domain.Message, error)) *SocialNetworkRepository_GetDialog_Call {
	_c.Call.Return(run)
	return _c
}

// GetDialogList provides a mock function with given fields: id
func (_m *SocialNetworkRepository) GetDialogList(id int) ([]*domain.DialogPreview, error) {
	ret := _m.Called(id)

	var r0 []*domain.DialogPreview
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]*domain.DialogPreview, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) []*domain.DialogPreview); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.DialogPreview)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SocialNetworkRepository_GetDialogList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDialogList'
type SocialNetworkRepository_GetDialogList_Call struct {
	*mock.Call
}

// GetDialogList is a helper method to define mock.On call
//   - id int
func (_e *SocialNetworkRepository_Expecter) GetDialogList(id interface{}) *SocialNetworkRepository_GetDialogList_Call {
	return &SocialNetworkRepository_GetDialogList_Call{Call: _e.mock.On("GetDialogList", id)}
}

func (_c *SocialNetworkRepository_GetDialogList_Call) Run(run func(id int)) *SocialNetworkRepository_GetDialogList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *SocialNetworkRepository_GetDialogList_Call) Return(_a0 []*domain.DialogPreview, _a1 error) *SocialNetworkRepository_GetDialogList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SocialNetworkRepository_GetDialogList_Call) RunAndReturn(run func(int) ([]*domain.DialogPreview, error)) *SocialNetworkRepository_GetDialogList_Call {
	_c.Call.Return(run)
	return _c
}

// GetFeedLastN provides a mock function with given fields: _a0, _a1
func (_m *SocialNetworkRepository) GetFeedLastN(_a0 int, _a1 int) ([]int, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []int
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]int, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(int, int) []int); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SocialNetworkRepository_GetFeedLastN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeedLastN'
type SocialNetworkRepository_GetFeedLastN_Call struct {
	*mock.Call
}

// GetFeedLastN is a helper method to define mock.On call
//   - _a0 int
//   - _a1 int
func (_e *SocialNetworkRepository_Expecter) GetFeedLastN(_a0 interface{}, _a1 interface{}) *SocialNetworkRepository_GetFeedLastN_Call {
	return &SocialNetworkRepository_GetFeedLastN_Call{Call: _e.mock.On("GetFeedLastN", _a0, _a1)}
}

func (_c *SocialNetworkRepository_GetFeedLastN_Call) Run(run func(_a0 int, _a1 int)) *SocialNetworkRepository_GetFeedLastN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *SocialNetworkRepository_GetFeedLastN_Call) Return(_a0 []int, _a1 error) *SocialNetworkRepository_GetFeedLastN_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SocialNetworkRepository_GetFeedLastN_Call) RunAndReturn(run func(int, int) ([]int, error)) *SocialNetworkRepository_GetFeedLastN_Call {
	_c.Call.Return(run)
	return _c
}

// GetFriendRequests provides a mock function with given fields: id
func (_m *SocialNetworkRepository) GetFriendRequests(id int) ([]domain.FriendRequest, error) {
	ret := _m.Called(id)

	var r0 []domain.FriendRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]domain.FriendRequest, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) []domain.FriendRequest); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FriendRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SocialNetworkRepository_GetFriendRequests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFriendRequests'
type SocialNetworkRepository_GetFriendRequests_Call struct {
	*mock.Call
}

// GetFriendRequests is a helper method to define mock.On call
//   - id int
func (_e *SocialNetworkRepository_Expecter) GetFriendRequests(id interface{}) *SocialNetworkRepository_GetFriendRequests_Call {
	return &SocialNetworkRepository_GetFriendRequests_Call{Call: _e.mock.On("GetFriendRequests", id)}
}

func (_c *SocialNetworkRepository_GetFriendRequests_Call) Run(run func(id int)) *SocialNetworkRepository_GetFriendRequests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *SocialNetworkRepository_GetFriendRequests_Call) Return(_a0 []domain.FriendRequest, _a1 error) *SocialNetworkRepository_GetFriendRequests_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SocialNetworkRepository_GetFriendRequests_Call) RunAndReturn(run func(int) ([]domain.FriendRequest, error)) *SocialNetworkRepository_GetFriendRequests_Call {
	_c.Call.Return(run)
	return _c
}

// GetFriends provides a mock function with given fields: id
func (_m *SocialNetworkRepository) GetFriends(id int) ([]int, error) {
	ret := _m.Called(id)

	var r0 []int
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]int, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) []int); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SocialNetworkRepository_GetFriends_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFriends'
type SocialNetworkRepository_GetFriends_Call struct {
	*mock.Call
}

// GetFriends is a helper method to define mock.On call
//   - id int
func (_e *SocialNetworkRepository_Expecter) GetFriends(id interface{}) *SocialNetworkRepository_GetFriends_Call {
	return &SocialNetworkRepository_GetFriends_Call{Call: _e.mock.On("GetFriends", id)}
}

func (_c *SocialNetworkRepository_GetFriends_Call) Run(run func(id int)) *SocialNetworkRepository_GetFriends_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *SocialNetworkRepository_GetFriends_Call) Return(_a0 []int, _a1 error) *SocialNetworkRepository_GetFriends_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SocialNetworkRepository_GetFriends_Call) RunAndReturn(run func(int) ([]int, error)) *SocialNetworkRepository_GetFriends_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastProfileId provides a mock function with given fields:
func (_m *SocialNetworkRepository) GetLastProfileId() (int, error) {
	ret := _m.Called()

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SocialNetworkRepository_GetLastProfileId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastProfileId'
type SocialNetworkRepository_GetLastProfileId_Call struct {
	*mock.Call
}

// GetLastProfileId is a helper method to define mock.On call
func (_e *SocialNetworkRepository_Expecter) GetLastProfileId() *SocialNetworkRepository_GetLastProfileId_Call {
	return &SocialNetworkRepository_GetLastProfileId_Call{Call: _e.mock.On("GetLastProfileId")}
}

func (_c *SocialNetworkRepository_GetLastProfileId_Call) Run(run func()) *SocialNetworkRepository_GetLastProfileId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SocialNetworkRepository_GetLastProfileId_Call) Return(_a0 int, _a1 error) *SocialNetworkRepository_GetLastProfileId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SocialNetworkRepository_GetLastProfileId_Call) RunAndReturn(run func() (int, error)) *SocialNetworkRepository_GetLastProfileId_Call {
	_c.Call.Return(run)
	return _c
}

// GetPost provides a mock function with given fields: post_id
func (_m *SocialNetworkRepository) GetPost(post_id int) (*domain.Post, error) {
	ret := _m.Called(post_id)

	var r0 *domain.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*domain.Post, error)); ok {
		return rf(post_id)
	}
	if rf, ok := ret.Get(0).(func(int) *domain.Post); ok {
		r0 = rf(post_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(post_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SocialNetworkRepository_GetPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPost'
type SocialNetworkRepository_GetPost_Call struct {
	*mock.Call
}

// GetPost is a helper method to define mock.On call
//   - post_id int
func (_e *SocialNetworkRepository_Expecter) GetPost(post_id interface{}) *SocialNetworkRepository_GetPost_Call {
	return &SocialNetworkRepository_GetPost_Call{Call: _e.mock.On("GetPost", post_id)}
}

func (_c *SocialNetworkRepository_GetPost_Call) Run(run func(post_id int)) *SocialNetworkRepository_GetPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *SocialNetworkRepository_GetPost_Call) Return(_a0 *domain.Post, _a1 error) *SocialNetworkRepository_GetPost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SocialNetworkRepository_GetPost_Call) RunAndReturn(run func(int) (*domain.Post, error)) *SocialNetworkRepository_GetPost_Call {
	_c.Call.Return(run)
	return _c
}

// GetProfileByEmail provides a mock function with given fields: email
func (_m *SocialNetworkRepository) GetProfileByEmail(email string) (*domain.Profile, error) {
	ret := _m.Called(email)

	var r0 *domain.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Profile, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Profile); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Profile)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SocialNetworkRepository_GetProfileByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProfileByEmail'
type SocialNetworkRepository_GetProfileByEmail_Call struct {
	*mock.Call
}

// GetProfileByEmail is a helper method to define mock.On call
//   - email string
func (_e *SocialNetworkRepository_Expecter) GetProfileByEmail(email interface{}) *SocialNetworkRepository_GetProfileByEmail_Call {
	return &SocialNetworkRepository_GetProfileByEmail_Call{Call: _e.mock.On("GetProfileByEmail", email)}
}

func (_c *SocialNetworkRepository_GetProfileByEmail_Call) Run(run func(email string)) *SocialNetworkRepository_GetProfileByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SocialNetworkRepository_GetProfileByEmail_Call) Return(_a0 *domain.Profile, _a1 error) *SocialNetworkRepository_GetProfileByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SocialNetworkRepository_GetProfileByEmail_Call) RunAndReturn(run func(string) (*domain.Profile, error)) *SocialNetworkRepository_GetProfileByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetProfilesBySearchPrefixes provides a mock function with given fields: first_name, last_name
func (_m *SocialNetworkRepository) GetProfilesBySearchPrefixes(first_name string, last_name string) ([]domain.Profile, error) {
	ret := _m.Called(first_name, last_name)

	var r0 []domain.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]domain.Profile, error)); ok {
		return rf(first_name, last_name)
	}
	if rf, ok := ret.Get(0).(func(string, string) []domain.Profile); ok {
		r0 = rf(first_name, last_name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Profile)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(first_name, last_name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SocialNetworkRepository_GetProfilesBySearchPrefixes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProfilesBySearchPrefixes'
type SocialNetworkRepository_GetProfilesBySearchPrefixes_Call struct {
	*mock.Call
}

// GetProfilesBySearchPrefixes is a helper method to define mock.On call
//   - first_name string
//   - last_name string
func (_e *SocialNetworkRepository_Expecter) GetProfilesBySearchPrefixes(first_name interface{}, last_name interface{}) *SocialNetworkRepository_GetProfilesBySearchPrefixes_Call {
	return &SocialNetworkRepository_GetProfilesBySearchPrefixes_Call{Call: _e.mock.On("GetProfilesBySearchPrefixes", first_name, last_name)}
}

func (_c *SocialNetworkRepository_GetProfilesBySearchPrefixes_Call) Run(run func(first_name string, last_name string)) *SocialNetworkRepository_GetProfilesBySearchPrefixes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *SocialNetworkRepository_GetProfilesBySearchPrefixes_Call) Return(_a0 []domain.Profile, _a1 error) *SocialNetworkRepository_GetProfilesBySearchPrefixes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SocialNetworkRepository_GetProfilesBySearchPrefixes_Call) RunAndReturn(run func(string, string) ([]domain.Profile, error)) *SocialNetworkRepository_GetProfilesBySearchPrefixes_Call {
	_c.Call.Return(run)
	return _c
}

// GetRandomProfiles provides a mock function with given fields: exclude_id
func (_m *SocialNetworkRepository) GetRandomProfiles(exclude_id int) ([]domain.Profile, error) {
	ret := _m.Called(exclude_id)

	var r0 []domain.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]domain.Profile, error)); ok {
		return rf(exclude_id)
	}
	if rf, ok := ret.Get(0).(func(int) []domain.Profile); ok {
		r0 = rf(exclude_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Profile)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(exclude_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SocialNetworkRepository_GetRandomProfiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRandomProfiles'
type SocialNetworkRepository_GetRandomProfiles_Call struct {
	*mock.Call
}

// GetRandomProfiles is a helper method to define mock.On call
//   - exclude_id int
func (_e *SocialNetworkRepository_Expecter) GetRandomProfiles(exclude_id interface{}) *SocialNetworkRepository_GetRandomProfiles_Call {
	return &SocialNetworkRepository_GetRandomProfiles_Call{Call: _e.mock.On("GetRandomProfiles", exclude_id)}
}

func (_c *SocialNetworkRepository_GetRandomProfiles_Call) Run(run func(exclude_id int)) *SocialNetworkRepository_GetRandomProfiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *SocialNetworkRepository_GetRandomProfiles_Call) Return(_a0 []domain.Profile, _a1 error) *SocialNetworkRepository_GetRandomProfiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SocialNetworkRepository_GetRandomProfiles_Call) RunAndReturn(run func(int) ([]domain.Profile, error)) *SocialNetworkRepository_GetRandomProfiles_Call {
	_c.Call.Return(run)
	return _c
}

// GetRelatedProfileById provides a mock function with given fields: id, related_id
func (_m *SocialNetworkRepository) GetRelatedProfileById(id int, related_id int) (*domain.RelatedProfile, error) {
	ret := _m.Called(id, related_id)

	var r0 *domain.RelatedProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (*domain.RelatedProfile, error)); ok {
		return rf(id, related_id)
	}
	if rf, ok := ret.Get(0).(func(int, int) *domain.RelatedProfile); ok {
		r0 = rf(id, related_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.RelatedProfile)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(id, related_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SocialNetworkRepository_GetRelatedProfileById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRelatedProfileById'
type SocialNetworkRepository_GetRelatedProfileById_Call struct {
	*mock.Call
}

// GetRelatedProfileById is a helper method to define mock.On call
//   - id int
//   - related_id int
func (_e *SocialNetworkRepository_Expecter) GetRelatedProfileById(id interface{}, related_id interface{}) *SocialNetworkRepository_GetRelatedProfileById_Call {
	return &SocialNetworkRepository_GetRelatedProfileById_Call{Call: _e.mock.On("GetRelatedProfileById", id, related_id)}
}

func (_c *SocialNetworkRepository_GetRelatedProfileById_Call) Run(run func(id int, related_id int)) *SocialNetworkRepository_GetRelatedProfileById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *SocialNetworkRepository_GetRelatedProfileById_Call) Return(_a0 *domain.RelatedProfile, _a1 error) *SocialNetworkRepository_GetRelatedProfileById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SocialNetworkRepository_GetRelatedProfileById_Call) RunAndReturn(run func(int, int) (*domain.RelatedProfile, error)) *SocialNetworkRepository_GetRelatedProfileById_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePost provides a mock function with given fields: profile_id, post
func (_m *SocialNetworkRepository) UpdatePost(profile_id int, post *domain.Post) error {
	ret := _m.Called(profile_id, post)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *domain.Post) error); ok {
		r0 = rf(profile_id, post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SocialNetworkRepository_UpdatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePost'
type SocialNetworkRepository_UpdatePost_Call struct {
	*mock.Call
}

// UpdatePost is a helper method to define mock.On call
//   - profile_id int
//   - post *domain.Post
func (_e *SocialNetworkRepository_Expecter) UpdatePost(profile_id interface{}, post interface{}) *SocialNetworkRepository_UpdatePost_Call {
	return &SocialNetworkRepository_UpdatePost_Call{Call: _e.mock.On("UpdatePost", profile_id, post)}
}

func (_c *SocialNetworkRepository_UpdatePost_Call) Run(run func(profile_id int, post *domain.Post)) *SocialNetworkRepository_UpdatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(*domain.Post))
	})
	return _c
}

func (_c *SocialNetworkRepository_UpdatePost_Call) Return(_a0 error) *SocialNetworkRepository_UpdatePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SocialNetworkRepository_UpdatePost_Call) RunAndReturn(run func(int, *domain.Post) error) *SocialNetworkRepository_UpdatePost_Call {
	_c.Call.Return(run)
	return _c
}

// WriteProfile provides a mock function with given fields: profile
func (_m *SocialNetworkRepository) WriteProfile(profile *domain.Profile) error {
	ret := _m.Called(profile)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Profile) error); ok {
		r0 = rf(profile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SocialNetworkRepository_WriteProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteProfile'
type SocialNetworkRepository_WriteProfile_Call struct {
	*mock.Call
}

// WriteProfile is a helper method to define mock.On call
//   - profile *domain.Profile
func (_e *SocialNetworkRepository_Expecter) WriteProfile(profile interface{}) *SocialNetworkRepository_WriteProfile_Call {
	return &SocialNetworkRepository_WriteProfile_Call{Call: _e.mock.On("WriteProfile", profile)}
}

func (_c *SocialNetworkRepository_WriteProfile_Call) Run(run func(profile *domain.Profile)) *SocialNetworkRepository_WriteProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.Profile))
	})
	return _c
}

func (_c *SocialNetworkRepository_WriteProfile_Call) Return(_a0 error) *SocialNetworkRepository_WriteProfile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SocialNetworkRepository_WriteProfile_Call) RunAndReturn(run func(*domain.Profile) error) *SocialNetworkRepository_WriteProfile_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewSocialNetworkRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewSocialNetworkRepository creates a new instance of SocialNetworkRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSocialNetworkRepository(t mockConstructorTestingTNewSocialNetworkRepository) *SocialNetworkRepository {
	mock := &SocialNetworkRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
